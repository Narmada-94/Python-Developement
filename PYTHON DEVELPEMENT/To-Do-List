import tkinter as tk
from tkinter import messagebox

class TodoList:
    def __init__(self, root):
        self.root = root
        self.root.title("To-Do List")
        self.tasks = []
        self.create_widgets()

    def create_widgets(self):
        # Entry widget for task input
        self.task_entry = tk.Entry(self.root, font=("Arial", 14), width=30)
        self.task_entry.grid(row=0, column=0, padx=10, pady=10)

        # Button to add task
        self.add_button = tk.Button(self.root, text="Add Task", font=("Arial", 14), command=self.add_task)
        self.add_button.grid(row=0, column=1, padx=10, pady=10)

        # Listbox to display tasks
        self.task_listbox = tk.Listbox(self.root, font=("Arial", 12), width=40, height=15)
        self.task_listbox.grid(row=1, column=0, columnspan=2, padx=10, pady=10)

        # Button to mark task as completed
        self.complete_button = tk.Button(self.root, text="Mark Completed", font=("Arial", 14), command=self.mark_completed)
        self.complete_button.grid(row=2, column=0, padx=10, pady=10)

        # Button to delete selected task
        self.delete_button = tk.Button(self.root, text="Delete Task", font=("Arial", 14), command=self.delete_task)
        self.delete_button.grid(row=2, column=1, padx=10, pady=10)

        # Label to display number of tasks
        self.num_tasks_label = tk.Label(self.root, text="", font=("Arial", 12))
        self.num_tasks_label.grid(row=3, column=0, columnspan=2, padx=10, pady=5)

        # Label to display message when task list is empty
        self.empty_label = tk.Label(self.root, text="Task list is empty", font=("Arial", 12))
        self.empty_label.grid(row=4, column=0, columnspan=2, padx=10, pady=5)

        # Initially hide the empty label
        self.empty_label.grid_remove()

    def add_task(self):
        task = self.task_entry.get()
        if task:
            self.tasks.append({"task": task, "completed": False})
            self.update_task_listbox()
            self.task_entry.delete(0, tk.END)
            self.update_num_tasks_label()
            self.empty_label.grid_remove()
        else:
            messagebox.showerror("Error", "Please enter a task.")

    def delete_task(self):
        selected_task_index = self.task_listbox.curselection()
        if selected_task_index:
            task_index = selected_task_index[0]
            del self.tasks[task_index]
            self.update_task_listbox()
            self.update_num_tasks_label()
            if not self.tasks:
                self.empty_label.grid()
        else:
            messagebox.showerror("Error", "Please select a task to delete.")

    def mark_completed(self):
        selected_task_index = self.task_listbox.curselection()
        if selected_task_index:
            task_index = selected_task_index[0]
            self.tasks[task_index]["completed"] = True
            self.update_task_listbox()
        else:
            messagebox.showerror("Error", "Please select a task to mark as completed.")

    def update_task_listbox(self):
        self.task_listbox.delete(0, tk.END)
        for task_info in self.tasks:
            task = task_info["task"]
            if task_info["completed"]:
                task = f"[âœ“] {task}"
            self.task_listbox.insert(tk.END, task)

    def update_num_tasks_label(self):
        num_tasks = len(self.tasks)
        self.num_tasks_label.config(text=f"Number of tasks: {num_tasks}")

if __name__ == "__main__":
    root = tk.Tk()
    app = TodoList(root)
    root.mainloop()
